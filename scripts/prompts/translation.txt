Translate this English tech blog post to Korean and format it for a Jekyll blog.

Original URL: {url}
Original Title: {title}
Authors: {authors}

Content to translate:
{content}

Available images (will be saved locally):
{images}

Requirements:
1. Translate naturally to Korean, keeping technical terms in English with Korean explanation
   Example: ÏùòÏ°¥ÏÑ± Ï£ºÏûÖ(Dependency Injection), ÏÉÅÌÉú Í¥ÄÎ¶¨(State Management)

2. Keep all code blocks, terminal commands, package names unchanged

3. Maintain markdown formatting (headers, lists, links, images)

4. Add an introduction note that this is a translation:
   > üí° Ïù¥ Í∏ÄÏùÄ [author]Ïùò "[original title]"ÏùÑ Î≤àÏó≠Ìïú Í≤ÉÏûÖÎãàÎã§.
   > ÏõêÎ¨∏: [URL]

5. Create a summary section with 3-5 bullet points after the introduction

6. For section headings:
   - Keep technical terms in headings when appropriate
   - Use natural Korean expressions

7. Handle special content:
   - Code comments: translate to Korean if helpful for understanding
   - Image alt text: translate to Korean
   - Links: keep original URLs, translate link text when needed

8. Image handling:
   - Include ONLY images that are essential for understanding the content
   - Place images at appropriate locations in the translated text
   - Use placeholder format: ![IMAGE_N] where N is the image number (1-based)
   - Add descriptive Korean captions for each image
   - Skip decorative or redundant images
   - Example: ![IMAGE_1] for first image, ![IMAGE_2] for second, etc.

Output JSON format:
{{
  "title": "[Ìï¥Ïô∏ Ìè¨Ïä§Ìä∏] {translated_title}",
  "categories": ["Tech Translation", "{appropriate_subcategory}"],
  "tags": ["{tag1}", "{tag2}", "{tag3}"],
  "description": "One-line description in Korean (60-100 characters)",
  "content": "Full translated markdown content with ![IMAGE_N] placeholders where appropriate",
  "original_title": "{original_english_title}",
  "original_author": "{author_name}",
  "suggested_slug": "short-english-slug-for-filename",
  "images_used": [1, 3, 5]  // List of image numbers actually used in the content
}}

Category Guidelines:
- Frontend: React, Vue, Angular, JavaScript, CSS, HTML
- Backend: Node.js, Python, Java, Go, databases
- DevOps: Docker, Kubernetes, CI/CD, cloud services
- AI/ML: Machine learning, deep learning, data science
- Architecture: System design, patterns, best practices
- Mobile: iOS, Android, React Native, Flutter

The content should flow naturally in Korean while preserving all technical accuracy.